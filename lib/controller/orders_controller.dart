
import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart' hide Order;
import '../model/order.dart';

class OrdersController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  // C√°c tr·∫°ng th√°i ƒë∆°n h√†ng trong h·ªá th·ªëng
  static const String STATUS_PENDING = 'Ch·ªù x·ª≠ l√Ω';
  static const String STATUS_SHIPPING = 'ƒêang giao';
  static const String STATUS_COMPLETED = 'ƒê√£ nh·∫≠n';
  static const String STATUS_RETURNED = 'Tr·∫£ h√†ng';
  static const String STATUS_CANCELLED = 'ƒê√£ h·ªßy';
  // Danh s√°ch t·∫•t c·∫£ c√°c tr·∫°ng th√°i 
  static const List<String> ALL_STATUSES = [
    STATUS_PENDING,
    STATUS_SHIPPING,
    STATUS_COMPLETED,
    STATUS_RETURNED,
    STATUS_CANCELLED,
  ];
  
  // Caching ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
  final Map<String, StreamController<List<OrderModel>>> _cachedStreams = {};
  final Map<String, List<OrderModel>> _cachedOrders = {};
  final Map<String, DateTime> _lastFetchTime = {};
  // Stream ƒë·ªÉ l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng v·ªõi caching
  Stream<List<OrderModel>> getUserOrdersStream(String userId) {
    print('üíæ getUserOrdersStream called for userId: $userId');
    final cacheKey = 'user_$userId';
    
    // Tr·∫£ v·ªÅ stream ƒë√£ cache n·∫øu c√≥
    if (_cachedStreams.containsKey(cacheKey)) {
      print('‚úÖ Using cached stream for user orders: $userId');
      return _cachedStreams[cacheKey]!.stream;
    }
    
    // T·∫°o stream controller m·ªõi
    final controller = StreamController<List<OrderModel>>.broadcast();
    _cachedStreams[cacheKey] = controller;
    
    // ƒêƒÉng k√Ω snapshot listener
    _firestore
      .collection('orders')
      .where('userId', isEqualTo: userId)
      .orderBy('orderDate', descending: true)
      .snapshots()
      .listen((snapshot) {
        print('üì¶ Got ${snapshot.docs.length} user orders from Firestore');
        final orders = snapshot.docs
            .map((doc) => OrderModel.fromFirestore(doc))
            .toList();
            
        // C·∫≠p nh·∫≠t cache v√† th√¥ng b√°o cho listeners
        _cachedOrders[cacheKey] = orders;
        _lastFetchTime[cacheKey] = DateTime.now();
        controller.add(orders);
      }, onError: (error) {
        print('‚ùå Error in user orders stream: $error');
        controller.addError(error);
      });
      
    return controller.stream;
  }

  // L·∫•y ƒë∆°n h√†ng theo ID v·ªõi cache
  Future<OrderModel?> getOrderById(String orderId) async {
    print('üîç Getting order details for ID: $orderId');
    
    // Ki·ªÉm tra trong cache tr∆∞·ªõc
    for (final orders in _cachedOrders.values) {
      final cachedOrder = orders.firstWhere(
        (order) => order.id == orderId,
        orElse: () => OrderModel(
          id: '', 
          userId: '', 
          userName: '', 
          userPhone: '', 
          shippingAddress: '',
          orderDate: DateTime.now(), 
          status: '', 
          items: [], 
          subtotal: 0, 
          shippingFee: 0, 
          discount: 0,
          total: 0, 
          voucherDiscount: 0, 
          pointsDiscount: 0, 
          pointsUsed: 0,
          paymentMethod: '', 
          isPaid: false
        )
      );
      
      if (cachedOrder.id.isNotEmpty) {
        print('‚úÖ Order found in cache');
        return cachedOrder;
      }
    }
    
    // Kh√¥ng t√¨m th·∫•y trong cache, truy xu·∫•t t·ª´ Firestore
    print('‚ö° Fetching order from Firestore');
    try {
      final doc = await _firestore.collection('orders').doc(orderId).get();
      if (doc.exists) {
        return OrderModel.fromFirestore(doc);
      }
      print('‚ùå Order not found in Firestore');
      return null;
    } catch (e) {
      print('‚ùå Error getting order by ID: $e');
      return null;
    }
  }

  // L·∫•y ƒë∆°n h√†ng theo tr·∫°ng th√°i v·ªõi cache
  Future<List<OrderModel>> getOrdersByStatus(String userId, String status) async {
    print('üîç getOrdersByStatus: userId=$userId, status=$status');
    final cacheKey = 'user_${userId}_status_$status';
    
    // Ki·ªÉm tra cache
    if (_cachedOrders.containsKey(cacheKey) && 
        _lastFetchTime.containsKey(cacheKey) && 
        DateTime.now().difference(_lastFetchTime[cacheKey]!).inMinutes < 5) {
      print('‚úÖ Using cached orders for status: $status');
      return _cachedOrders[cacheKey]!;
    }
    
    print('‚ö° Fetching status orders from Firestore');
    try {
      final snapshot = await _firestore
          .collection('orders')
          .where('userId', isEqualTo: userId)
          .where('status', isEqualTo: status)
          .orderBy('orderDate', descending: true)
          .get();
      
      final orders = snapshot.docs.map((doc) => OrderModel.fromFirestore(doc)).toList();
      
      // C·∫≠p nh·∫≠t cache
      _cachedOrders[cacheKey] = orders;
      _lastFetchTime[cacheKey] = DateTime.now();
      
      print('üì¶ Cached ${orders.length} orders for status: $status');
      return orders;
    } catch (e) {
      print('‚ùå Error in getOrdersByStatus: $e');
      return [];
    }
  }
  
  // Stream ƒë·ªÉ l·∫•y ƒë∆°n h√†ng theo tr·∫°ng th√°i v·ªõi caching v√† debug
  Stream<List<OrderModel>> getOrdersByStatusStream(String userId, String status) {
    print('üíæ getOrdersByStatusStream: userId=$userId, status=$status');
    final cacheKey = 'user_${userId}_status_$status';
    
    // Tr·∫£ v·ªÅ stream ƒë√£ cache n·∫øu c√≥
    if (_cachedStreams.containsKey(cacheKey)) {
      print('‚úÖ Using cached stream for status: $status');
      return _cachedStreams[cacheKey]!.stream;
    }
    
    // T·∫°o stream controller m·ªõi
    final controller = StreamController<List<OrderModel>>.broadcast();
    _cachedStreams[cacheKey] = controller;
    
    try {
      print('‚ö° Creating new Firestore listener for status: $status');
      _firestore
        .collection('orders')
        .where('userId', isEqualTo: userId)
        .where('status', isEqualTo: status)
        .orderBy('orderDate', descending: true)
        .snapshots()
        .listen((snapshot) {
          print('üì¶ Got ${snapshot.docs.length} orders for status: $status');
          final orders = snapshot.docs
              .map((doc) => OrderModel.fromFirestore(doc))
              .toList();
              
          // C·∫≠p nh·∫≠t cache v√† th√¥ng b√°o cho listeners
          _cachedOrders[cacheKey] = orders;
          _lastFetchTime[cacheKey] = DateTime.now();
          controller.add(orders);
        }, onError: (error) {
          print('‚ùå Error in status orders stream: $error');
          controller.addError(error);
        });
    } catch (e) {
      print('‚ùå Exception setting up status order stream: $e');
      controller.addError(e);
    }
    
    return controller.stream;
  }
  
  // Stream ƒë·ªÉ l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (cho tab t·∫•t c·∫£) v·ªõi caching v√† debug
  Stream<List<OrderModel>> getAllOrdersStream(String userId) {
    print('üíæ getAllOrdersStream: userId=$userId');
    final cacheKey = 'user_${userId}_all';
    
    // Tr·∫£ v·ªÅ stream ƒë√£ cache n·∫øu c√≥
    if (_cachedStreams.containsKey(cacheKey)) {
      print('‚úÖ Using cached stream for all orders');
      return _cachedStreams[cacheKey]!.stream;
    }
    
    // T·∫°o stream controller m·ªõi
    final controller = StreamController<List<OrderModel>>.broadcast();
    _cachedStreams[cacheKey] = controller;
    
    try {
      print('‚ö° Creating new Firestore listener for all orders');
      _firestore
        .collection('orders')
        .where('userId', isEqualTo: userId)
        .orderBy('orderDate', descending: true)
        .snapshots()
        .listen((snapshot) {
          print('üì¶ Got ${snapshot.docs.length} total orders');
          final orders = snapshot.docs
              .map((doc) => OrderModel.fromFirestore(doc))
              .toList();
              
          // C·∫≠p nh·∫≠t cache v√† th√¥ng b√°o cho listeners
          _cachedOrders[cacheKey] = orders;
          _lastFetchTime[cacheKey] = DateTime.now();
          controller.add(orders);
        }, onError: (error) {
          print('‚ùå Error in all orders stream: $error');
          controller.addError(error);
        });
    } catch (e) {
      print('‚ùå Exception setting up all orders stream: $e');
      controller.addError(e);
    }
    
    return controller.stream;
  }  // Chuy·ªÉn ƒë·ªïi OrderModel sang Order c≈© ƒë·ªÉ h·ªó tr·ª£ UI hi·ªán t·∫°i
  // ƒê∆∞·ª£c t·ªëi ∆∞u ƒë·ªÉ l√†m vi·ªác nhanh h∆°n
  List<Order> convertToLegacyOrders(List<OrderModel> orders) {
    print('üîÑ Converting ${orders.length} OrderModel to legacy orders');
    return orders.map((order) {
      // L·∫•y s·∫£n ph·∫©m ƒë·∫ßu ti√™n trong ƒë∆°n h√†ng ƒë·ªÉ hi·ªÉn th·ªã
      final firstItem = order.items.isNotEmpty ? order.items[0] : null;
      
      return Order(
        imagePath: firstItem?.productImage ?? 'assets/images/default_product.png',
        productName: firstItem?.productName ?? 'S·∫£n ph·∫©m',
        color: firstItem?.color ?? '',
        quantity: firstItem?.quantity ?? 0,
        price: order.total, // S·ª≠ d·ª•ng t·ªïng gi√° tr·ªã ƒë∆°n h√†ng thay v√¨ gi√° s·∫£n ph·∫©m
        status: order.status,
      );
    }).toList();
  }
  
  // Gi·∫£i ph√≥ng t√†i nguy√™n khi kh√¥ng c·∫ßn n·ªØa
  void dispose() {
    for (final controller in _cachedStreams.values) {
      controller.close();
    }
    _cachedStreams.clear();
    _cachedOrders.clear();
    _lastFetchTime.clear();
  }
}
